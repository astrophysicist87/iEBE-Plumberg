#!/usr/bin/env python

""" Provide support for assignment formats.
    The convention is that when stored in files, column index starts
    with 1, even though python convention starts with 0.
"""


# Version 1

from listR import isFloat

def assignmentExprStream2Dict(data, assignmentSymbol="=", commentSymbol="#"):
    """ Assume that each line in the "data" stream is an assignment
    expression (e.g. "x=1", "x:1", etc), return a dictionary representing
    such assginments. The keys are the striped LHS of the assignments
    and the values are the RHS assignments, converted into numerics
    if possible.
    Any line without the assignmentSymbol will be ignored.
    Any string beyond the commentSymbol is discarded.
    The returned value is a dictionary, whose keys and values are strings.
    """
    return_dict = {};
    for aLine in data:
        assignmentSymbolLocation = aLine.find(assignmentSymbol)
        if assignmentSymbolLocation == -1: continue # no assignmentSymbol found in the line
        commentSymbolLocation = aLine.find(commentSymbol)
        if commentSymbolLocation != -1: aLine_noComment = aLine[:commentSymbolLocation] # contains the comment symbol
        LHS = aLine[:assignmentSymbolLocation].strip()
        RHS = aLine[assignmentSymbolLocation+1:].strip()
        if isFloat(RHS): RHS = float(RHS)
        return_dict[LHS] = RHS
    return return_dict


def assignmentExprStream2IndexDict(data, assignmentSymbol="=", commentSymbol="#", autoAdjustShift=True):
    """ Once the assignment dictionary is generated by assginmentExprStream2Dict,
        convert the "values" to integer indices. By default if the lowest index
        in the dictionary is 1 then all indices (values) are shifted by -1.
    """
    converted_dict = assignmentExprStream2Dict(data, assignmentSymbol, commentSymbol)
    values = [int(converted_dict[key]) for key in converted_dict];
    shift_in_index = 0
    lowest_index = min(values)
    if autoAdjustShift:
        if lowest_index==1: shift_in_index = 1
    return_dict = {key:int(converted_dict[key])-shift_in_index for key in converted_dict.keys()}
    return return_dict


def dict2AssignmentExprList(aDict, assignmentSymbol="="):
    """ This function performs the inverse of action done in
    assignmentExprStream2Dict by converting dictionaries back to
    a list of strings of form (by default) "x=1" etc.
    """
    return [key+assignmentSymbol+str(aDict[key]) for key in aDict.keys()]
